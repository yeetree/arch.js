//Arch.js Ports:
//This allows for Arch.js programs to communicate with things outside
//of the cpu, like keyboards and displays.

class ports
{
    ports = [];

    constructor()
    {
        this.ports[0] = new consoletty();
        this.ports[1] = new videoport();
    };

    in = async function(port, data, th)
    {
        this.ports[port].in(data, th);
    };

    out = async function(port, th)
    {
        return this.ports[port].out(th);
    };
}

class port
{
    in = async function(num, th)
    {

    }

    out = async function(th)
    {

    }
}

class consoletty extends port
{
    constructor() {
        super();
        var term = document.getElementById("console");
        term.innerHTML = "";
        term.outerHTML = term.outerHTML;
    }
    ascii = [
        '','&#01;','&#02;','&#03;','&#04;','&#05;','&#06;','&#;07',
        '&#08;','&#09;','&#10;','&#11;','&#12;','&#13;','&#14;','&#15;',
        '&#16;','&#17;','&#18;','&#19;','&#20;','&#21;','&#22;','&#23;',
        '&#24;','&#25;','&#26;','&#27;','&#28;','&#29;','&#30;','&#31',
        ' ', '!', '"', '#', '$', '%', '&', '\'',
        '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', ':', ';', '<', '=', '>', '?',
        '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
        'P', 'Q', 'L', 'S', 'T', 'U', 'V', 'W',
        'X', 'Y', 'Z', '[', '\\' ,']', '^', '_',
        '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
        'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
        'x', 'y', 'z', '{', '|', '}', '~', ''
    ];

    waitkey = function(th, th2)
    {
        return new Promise((resolve) => {
            //th.stop();
            var term = document.getElementById("console")

            term.addEventListener("keydown", keyhandler);
            function keyhandler(e)
            {
                if(e.key.length == 1)
                {
                    //th.start();
                    term.removeEventListener("keydown", keyhandler)
                    let ret = 0;
                    if(th2.ascii.indexOf(e.key) != -1)
                        ret=th2.ascii.indexOf(e.key)
                    resolve(ret);
                }
                else if(e.key == "Enter")
                {
                    //th.start();
                    term.removeEventListener("keydown", keyhandler)
                    resolve(13);
                }
                else if(e.key == "Backspace")
                {
                    //th.start();
                    term.removeEventListener("keydown", keyhandler)
                    resolve(8);
                }
            }
        });
    };

    out = async function(th)
    {
        return this.waitkey(th, this);
    };

    in = async function(num, th)
    {
        if(num == 8)
        {
            let txt = document.getElementById("console").innerHTML;
            txt = txt.substring(0, txt.length-1);
            document.getElementById("console").innerHTML = txt;
        }
        else
            document.getElementById("console").innerHTML += this.ascii[num];
    };

}


class videoport extends port
{
    bgcolor=0;
    color=255;

    data=[];

    constructor()
    {
        super();
    }

    in = async function(num, th)
    {
        if(num==8)
            this.data.pop();
        else if(num==0)
            this.data = [];
        else
            this.data.push(num);

        this.update(th);
    }

    out = async function(th)
    {

    }

    update = function(th)
    {
        th.vram.data = Array(65536).fill(0);

        let line=0;
        let char=-1;

        for(let i=0; i<this.data.length; i++)
        {
            if(char == 31 || this.data[i] == 13)
            {
                char = -1;
                line++;
            }
            if(this.data[i] == 13)
            {
                char = -1;
            }
            else
                char ++;

            this.displaychar(this.data[i], th, line, char)
        }
    }

    displaychar = function(num, th, line, char)
    {
        let letter = font[num];
        let index = 193 + (192*9*line) + (char*6);
        let letterindex = 0;
        for(let i=0; i<8; i++)
        {
            for(let e=0; e<6; e++)
            {
                if(letter[letterindex] == "1")
                    th.vram.set(index, this.color);
                else
                    th.vram.set(index, this.bgcolor);
                index+=1
                letterindex+=1;
            }
            index+=186;
        }
    }
}

let font = [
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "011000011000011000011000011000000000011000011000",
    "110110110110110110000000000000000000000000000000",
    "010010111111111111010010010010111111111111010010",
    "001000011110100000111110000010000010111100001000",
    "110010110010000110001100011000110000100110100110",
    "011100100010100010011100100010100011100010011101",
    "001100001100000000000000000000000000000000000000",
    "001110011000110000110000110000110000011000001110",
    "011100000110000011000011000011000011000110011100",
    "001100011110001100010010000000000000000000000000",
    "000000001100001100011110011110001100001100000000",
    "000000000000000000000000011000011000001000010000",
    "000000000000000000011110011110000000000000000000",
    "000000000000000000000000000000011000011000011000",
    "000010000010000100000100001000001000010000010000",
    "011100100010100110101010110010100010100010011100",
    "001100011100001100001100001100001100001100011110",
    "111000000100000100001000010000100000100000111100",
    "111000000100000100011000000100000100000100111000",
    "100100100100100100111100000100000100000100000100",
    "111100100000100000111000000100000100000100111000",
    "011100100000100000111000100100100100100100111100",
    "111100000100001000001000010000010000100000100000",
    "011100100010100010011100100010100010100010011100",
    "011100100010100010011110000010000010000100011000",
    "011000011000011000000000000000011000011000011000",
    "011000011000011000000000011000011000001000010000",
    "000110001100011000110000110000011000001100000110",
    "011000001100000110000011000011000110001100011000",
    "011000001100000110000011000011000110001100011000",
    "011000100100000100000100011000000000011000011000",
    "011100100010100010101010101010100110100000011100",
    "011100100010100010100010111110100010100010100010",
    "111100100010100010111100100010100010100010111100",
    "011110100000100000100000100000100000100000011110",
    "111100100010100010100010100010100010100010111100",
    "111110100000100000111100100000100000100000111110",
    "111110100000100000111100100000100000100000100000",
    "011100100010100000100000101110100010100010011100",
    "100010100010100010111110100010100010100010100010",
    "011100001000001000001000001000001000001000011100",
    "001110000100000100000100000100100100100100011100",
    "100010100010100100111000111000100100100010100010",
    "100000100000100000100000100000100000100000111110",
    "100010110110111110111110101010100010100010100010",
    "100010110010111010111110101110100110100010100010",
    "011100100010100010100010100010100010100010011100",
    "111100100010100010100010111100100000100000100000",
    "011100100010100010100010100010100010100100011010",
    "111100100010100010100010111100101000100100100010",
    "011100100010100000011100000010000010100010011100",
    "011100001000001000001000001000001000001000001000",
    "100010100010100010100010100010100010100010011100",
    "100010100010100010100010010100010100001000001000",
    "100010100010100010100010100010101010101010010100",
    "100010100010010100001000001000010100100010100010",
    "100010100010100010010100001000001000001000001000",
    "111110000010000110001100011000110000100000111110",
    "011110011000011000011000011000011000011000011110",
    "010000010000001000001000000100000100000010000010",
    "011110000110000110000110000110000110000110011110",
    "001100011110010010010010000000000000000000000000",
    "000000000000000000000000000000000000011110011110",
    "010000001000000100000000000000000000000000000000",
    "011100100010100010100010111110100010100010100010",
    "111100100010100010111100100010100010100010111100",
    "011110100000100000100000100000100000100000011110",
    "111100100010100010100010100010100010100010111100",
    "111110100000100000111100100000100000100000111110",
    "111110100000100000111100100000100000100000100000",
    "011100100010100000100000101110100010100010011100",
    "100010100010100010111110100010100010100010100010",
    "011100001000001000001000001000001000001000011100",
    "001110000100000100000100000100100100100100011100",
    "100010100010100100111000111000100100100010100010",
    "100000100000100000100000100000100000100000111110",
    "100010100010110110111110101010100010100010100010",
    "100010100010110010111010101110100110100010100010",
    "011100100010100010100010100010100010100010011100",
    "111100100010100010100010111100100000100000100000",
    "011100100010100010100010100010100010100100011010",
    "111100100010100010100010111100101000100100100010",
    "011100100010100000011100000010000010100010011100",
    "011100001000001000001000001000001000001000001000",
    "100010100010100010100010100010100010100010011100",
    "100010100010100010100010010100010100001000001000",
    "100010100010100010100010100010101010101010010100",
    "100010100010010100001000001000010100100010100010",
    "100010100010100010010100001000001000001000001000",
    "111110000010000110001100011000110000100000111110",
    "001100010000010000110000110000010000010000001100",
    "001100001100001100001100001100001100001100001100",
    "001100000010000010000011000011000010000010001100",
    "000000000000000000011010100100000000000000000000",
    "000000000000000000000000000000000000000000000000"
]