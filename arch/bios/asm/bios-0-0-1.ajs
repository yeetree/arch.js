org 0xF000;                         ! BIOS starts at 0xF000

jmp :_bios;

label _bios_ver;                    ! BIOS version
dw 0;

label _bios_startupmsg;             ! Message displayed when BIOS starts up
db "Arch.js BIOS v\0"

label _bios_searchingforboot;       ! Message displayed when BIOS is searching for an MBR
db "\nSearching for bootable disk...\0"

label _bios_bootdiskfound;          ! Message displayed when BIOS found MBR
db "\nBootable disk found. Booting disk...\0"

label _bios_notbootable;            ! Message displayed when disk is not bootable
db "\nThis disk is not bootable.\0"

label _bios;                        ! End of BIOS header

    org 0;                          ! Reset origin when accessing memory

    store 0x20 :getbiosver;         ! Set interrupt 10 to :getbiosver

    store 0x22 :getcserial;         ! Set interrupt 11 to :getcserial

    store 0x40 :printstr;           ! Set interrupt 20 to :printstr

    store 0x42 :printnum;           ! Set interrupt 21 to :printnum

    org 0xF000;                     ! Back to BIOS memory

    jmp :_bios_loadmbr;             ! Load MBR

label _bios_loadmbr;
    mov ax :_bios_startupmsg;       ! Print StartUp Message
    int 0x20;
    load ax :_bios_ver;             ! Print Version
    int 0x21;

    mov ax :_bios_searchingforboot; ! Loads address of searchingforboot string
    int 0x20;                       ! Prints string

    outb 1 10;                      ! Sets disk mode to READ
    outw 510 11;                    ! Sets disk address location to 510
    inw ax 11;                      ! Reads word from disk

    cmp ax 0x55AA;                  ! See if the last two bytes of MBR matches boot signature
    je :_bios_loadmbr_load;
    jmp :_bios_loadmbr_noload;

    label _bios_loadmbr_load;           ! Loads MBR from disk (TAKES A LONG TIME)
        mov ax :_bios_bootdiskfound;    ! Prints BootDiskFound Message
        int 0x20;

        outb 2 10;                      ! Sets disk mode to STREAM
        mov cx 512;                     ! Set Counter

        label _bios_loadmbr_read512;    ! Define loop
            inb al 11;                  ! Gets byte from stream

            org 0;                      ! Reset origin when accessing memory

            store cx al;                ! Sets byte at address CX to AL

            inc cx;                     ! increments cx
            cmp cx 1024;                ! if cx has not reached 1024, loop again.
            jne :_bios_loadmbr_read512;


        jmp 512;                        ! Jump to 512 when done
        org 0xF000;                     ! Back to BIOS memory

    label _bios_loadmbr_noload;
        mov ax :_bios_notbootable;      ! Set AX to address of Not Bootable Message
        int 0x20;                       ! Interrupt to print string at location AX
        label _bios_loadmbr_noload_loop;
        jmp :_bios_loadmbr_noload_loop; ! Loop forever

label printnum;                         ! Prints a number
    pushw ax;                           ! Pushes values of current registers
    pushw bx;
    pushw cx;

    mov cx 0;                           ! Sets CX to 0

    cmp ax 0;                           ! See if AX is already 0
    jne :printnum_loop;                 ! If not, start loop;
    
    pushw 0;                            ! If so, push 0, increment CX, and go to end of loop.
    inc cx;

    jmp :printnum_end;


    label printnum_loop;                ! Define loop

        mov bx ax;                      ! Set BX to AX
        div ax 10;                      ! Divide AX by 10
        mod bx 10;                      ! Get modulo of BX and 10 (BX is AX)

        cmp ax 0;                       ! See if result is 0
        jne :printnum_gobackloop;       ! Jump to start of loop if not
        cmp bx 0;                       ! See if remainder is 0
        jne :printnum_gobackloop;       ! Jump to start of loop if not

        jmp :printnum_end;             ! Else, restart loop

    label printnum_gobackloop;
        pushw bx;                       ! push bx, increment cx
        inc cx;
        jmp :printnum_loop;

    label printnum_end;                 ! End of loop

        popw bx;                        ! Pop BX
        add bx '0';                     ! Convert to ASCII
        outw bx 0;                      ! Print to Serial Console
        dec cx;                         ! Decrement CX

        cmp cx 0;                       ! If CX is not 0 (No more characters to print)
        jne :printnum_end;              ! Loop back to printnum_end

        popw cx;                        ! Pop values of registers
        popw bx;
        popw ax;

        ret;                            ! Make sure to return


label printstr;                     ! Prints a string
    pushw ax;
    pushw dx;

    label printstr_loop;
    
    load dl ax;                     ! Loads data from memory location AX and stores in DX
    cmp dl 0;                       ! Check if current character is null
    je :printstr_end;
    outb dl 0;
    inc ax;
    jmp :printstr_loop;

    label printstr_end;
    
    popw dx;
    popw ax
    ret;

label getbiosver;                   ! Get BIOS version

    load ax :_bios_ver;               

    ret;                            

label getcserial;                   ! Wait for character

    pushw cx;                       
    mov cx 0;

    mov ax 0;                       

    label getcserial_loop;

    inw ax 0;                       ! Get current character
    cmp ax 0;                       
    jne :getcserial_end;            ! Exit loop if it is not 0

    cmp cx 5;                       
    je :getcserial_cx0;             ! Jump to :getcserial_cx0 if cx is 5

    cmp cx 10;                      ! Jump to :getcserial_cx1 if cx is 10
    je :getcserial_cx1;

    add cx 1;                       ! If neither, add 1 and return to loop

    jmp :getcserial_loop;

    label getcserial_cx0;           ! Add an underscore and increment cx
        outb '_' 0;
        add cx 1;
        jmp :getcserial_loop

    label getcserial_cx1;           ! Remove the underscore and set cx to 0
        outb 8 0;
        mov cx 0;
        jmp :getcserial_loop

    label getcserial_end_cx1;       ! Remove the underscore, set cx to 0, and jump to :getcserial_end
        outb 8 0;
        mov cx 0;
        jmp :getcserial_end

    label getcserial_end;

    cmp cx 6;                       ! Jump to :getcserial_end_cx1 if cx is 6 or more. (It means the underscore is still there)
    je :getcserial_end_cx1;
    jc :getcserial_end_cx1;

    popw cx;                        ! Restore original cx value
    ret;                            ! Make sure to return