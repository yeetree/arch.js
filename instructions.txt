------ Registers -------

0 is reserved for telling instructions to look for memory addresses.

16 Bit Registers:

1: ax: General Purpose (16 bit)

2: bx: General Purpose (16 bit)

3: cx: General Purpose (16 bit)

4: dx: General Purpose (16 bit)

5: r: Return / General Purpose (16 bit)

6: sp: Stack Pointer (16 bit)

7: bp: Base Pointer (16 bit)

8: f: Flags (16 bit)

9: pc: Program Counter (16 bit)


8 Bit Registers:

1: ah (ax): General Purpose (8 bit)
2: al (ax): General Purpose (8 bit)

3: bh (bx): General Purpose (8 bit)
4: bl (bx): General Purpose (8 bit)

5: ch (cx): General Purpose (8 bit)
6: cl (cx): General Purpose (8 bit)

7: dh (dx): General Purpose (8 bit)
8: dl (dx): General Purpose (8 bit)

9: rh (r): General Purpose (8 bit)
10: rl (r): General Purpose (8 bit)

11: s: Memory Bank (8 bit)


------------------------


-- Instruction Format --

XXXXXXXXYYYYZZZZ:
    -X: Operation Code
    -Y: Argument 1 (Most always a register)
    -Z: Argument 2 (Most always a register)
    
------------------------


---- Argument Types ----

reg8   -   8 bit register
reg16  -   16 bit register
mem8   -   memory byte
mem16  -   memory word
imm8   -   8 bit immediate
imm16  -   16 bit immediate

------------------------


----- Instructions -----

$00: NOP

$01: ADD    reg8/mem8,      reg8/mem8
$02: ADD    reg16/mem16,    reg16/mem16
$03: ADD    reg8/mem8,      imm8
$04: ADD    reg16/mem16,    imm16
$05: ADD    reg16/mem16,    imm8

$06: ADC    reg8/mem8,      reg8/mem8
$07: ADC    reg16/mem16,    reg16/mem16
$08: ADC    reg8/mem8,      imm8
$09: ADC    reg16/mem16,    imm16
$0A: ADC    reg16/mem16,    imm8

$0B: AND    reg8/mem8,      reg8/mem8
$0C: AND    reg16/mem16,    reg16/mem16   
$0D: AND    reg8/mem8,      imm8
$0E: AND    reg16/mem16,    imm16
$0F: AND    reg16/mem16,    imm8

$10: OR     reg8/mem8,      reg8/mem8
$11: OR     reg16/mem16,    reg16/mem16     
$12: OR     reg8/mem8,      imm8
$13: OR     reg16/mem16,    imm16
$14: OR     reg16/mem16,    imm8

$15: XOR    reg8/mem8,      reg8/mem8
$16: XOR    reg16/mem16,    reg16/mem16     
$17: XOR    reg8/mem8,      imm8
$18: XOR    reg16/mem16,    imm16
$19: XOR    reg16/mem16,    imm8

$1A: SUB    reg8/mem8,      reg8/mem8
$1B: SUB    reg16/mem16,    reg16/mem16    
$1C: SUB    reg8/mem8,      imm8
$1D: SUB    reg16/mem16,    imm16
$1E: SUB    reg16/mem16,    imm8

$1F: SBB    reg8/mem8,      reg8/mem8
$20: SBB    reg16/mem16,    reg16/mem16    
$21: SBB    reg8/mem8,      imm8
$22: SBB    reg16/mem16,    imm16
$23: SBB    reg16/mem16,    imm8

$24: MUL    reg8/mem8
$25: MUL    reg16/mem16

$26: IMUL   reg8/mem8
$27: IMUL   reg16/mem16

$28: DIV    reg8/mem8
$29: DIV    reg16/mem16

$2A: IDIV   reg8/mem8
$2B: IDIV   reg16/mem16

$2C: NOT    reg8/mem8
$2D: NOT    reg16/mem16

$2E: NEG    reg8/mem8
$2F: NEG    reg16/mem16

$30: INC    reg8/mem8
$31: INC    reg16/mem16

$32: DEC    reg8/mem8
$33: DEC    reg16/mem16

$34: CMP    reg8/mem8,      reg8/mem8
$35: CMP    reg16/mem16,    reg16/mem16
$36: CMP    reg8/mem8,      imm8
$37: CMP    reg16/mem16,    imm16
$38: CMP    reg16/mem16,    imm8

$39: PUSH   reg16/mem16
$3A: PUSH   imm16
$3B: POP    reg16/mem16

$3C: CALL   [reg16/mem16]
$3D: CALL   [imm16]
$3E: RET

$3F: JMP    [reg16/mem16]
$40: JMP    [imm16]

$41: JE     [reg16/mem16]
$42: JE     [imm16]

$43: JNE    [reg16/mem16]
$44: JNE    [imm16]

$45: JZ     [reg16/mem16]
$46: JZ     [imm16]

$47: JNZ    [reg16/mem16]
$48: JNZ    [imm16]

$49: JC     [reg16/mem16]
$4A: JC     [imm16]

$4B: JNC    [reg16/mem16]
$4C: JNC    [imm16]

$4D: INW    reg16/mem16,    PORT[imm16]
$4E: INW    imm16,          PORT[imm16]

$4F: OUTW   reg16/mem16,    PORT[imm16]
$4G: OUTW   imm16,          PORT[imm16]

$4D: INW    reg8/mem8,      PORT[imm16]
$4E: INW    imm8,           PORT[imm16]

$4F: OUTW   reg8/mem8,      PORT[imm16]
$50: OUTW   imm8,           PORT[imm16]

------------------------